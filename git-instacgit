#!/usr/bin/env python
import errno
import os
import subprocess
import sys

try:
    from http.server import CGIHTTPRequestHandler, HTTPServer
    from socketserver import ThreadingMixIn
except ImportError:
    from CGIHTTPServer import CGIHTTPRequestHandler
    from BaseHTTPServer import HTTPServer
    from SocketServer import ThreadingMixIn


class CGitRequestHandler(CGIHTTPRequestHandler):

    def __init__(self, cgit_path, cgit_datadir, *args):
        self.cgit_path = cgit_path
        self.cgit_datadir = cgit_datadir
        CGIHTTPRequestHandler.__init__(self, *args)

    def is_cgi(self):
        if self.path == '/':
            self.path = '/cgit/'
        self.cgi_info = ('/cgit', self.path[5:])
        return self.path.startswith('/cgit/')

    def translate_path(self, path):
        if path == '/cgit/':
            return self.cgit_path
        path = CGIHTTPRequestHandler.translate_path(self, path)
        path = os.path.relpath(path)
        return os.path.join(self.cgit_datadir, path)


class CGitServer(ThreadingMixIn, HTTPServer):

    def __init__(self, server_address, cgit_path, cgit_datadir):
        def handle_request(*args):
            return CGitRequestHandler(cgit_path, cgit_datadir, *args)
        HTTPServer.__init__(self, server_address, handle_request)


def _decode_output(value):
    """Decodes Git output into a unicode string.

    On Python 2 this is a no-op; on Python 3 we decode the string as
    suggested by [1] since we know that Git treats paths as just a sequence
    of bytes and all of the output we ask Git for is expected to be a file
    system path.

    [1] http://docs.python.org/3/c-api/unicode.html#file-system-encoding

    """
    if sys.hexversion < 0x3000000:
        return value
    return value.decode(sys.getfilesystemencoding(), 'surrogateescape')


def get_output(*cmd, **kwargs):
    ignore_errors = kwargs.pop('ignore_errors', False)
    if kwargs:
        raise TypeError('unknown keyword argument: %s' % kwargs.keys()[0])

    c = subprocess.Popen(cmd, stdout=subprocess.PIPE)
    output = c.communicate()[0].strip()
    output = _decode_output(output)
    c.wait()
    if c.returncode and not ignore_errors:
        raise subprocess.CalledProcessError(c.returncode, c, output)
    return output


def get_config_path(var):
    value = get_output('git', 'config', '--path', '--get', var,
                      ignore_errors=True)
    if not value:
        value = None
    return value


CGIT_NOT_FOUND_MESSAGE = '''fatal: cgit not found

You must tell git-instacgit how to find CGit on your system:

        git config --global instacgit.script /path/to/cgit
        git config --global instacgit.datadir /path/to/directory/

"instacgit.datadir" should contain "cgit.css".
'''


class InstaCGit(object):

    def __init__(self, git_dir, cgit_datadir, cgit_path=None, cgitrc_file=None):
        self.git_dir = git_dir
        self.cgit_datadir = cgit_datadir
        if cgit_path is None:
            cgit_path = os.path.join(self.cgit_datadir, 'cgit')
        self.cgit_path = cgit_path
        if cgitrc_file is None:
            cgitrc_file = os.path.join(self.git_dir, 'cgitrc')
        self.cgitrc_file = cgitrc_file

    def create_cgitrc(self):
        repo_path = get_output('git', 'rev-parse', '--show-toplevel')
        if not repo_path:
            repo_path = self.git_dir

        with open(self.cgitrc_file, 'w') as f:
            f.write('''
enable-commit-graph=1
enable-index-links=1
enable-log-filecount=1
enable-log-linecount=1
enable-git-config=1
max-stats=year

repo.url={name}
repo.name={name}
repo.path={path}
'''.format(name=os.path.basename(repo_path),
           path=self.git_dir))

    def write_agefile(self):
        web_dir = os.path.join(self.git_dir, 'info', 'web')
        try:
            os.makedirs(web_dir)
        except OSError as e:
            if e.errno != errno.EEXIST:
                raise
        date = get_output('git', 'for-each-ref', '--count=1',
                          '--sort=-committerdate',
                          '--format=%(committerdate:iso)')
        with open(os.path.join(web_dir, 'last-modified'), 'w') as f:
            f.write('%s\n' % date)

    def run(self):
        self.create_cgitrc()
        self.write_agefile()

        os.environ['CGIT_CONFIG'] = self.cgitrc_file
        if not all(p and os.path.exists(p)
                   for p in (self.cgit_path, self.cgit_datadir)):
            sys.stderr.write(CGIT_NOT_FOUND_MESSAGE)
            return 1

        server = CGitServer(('localhost', 8080),
                            self.cgit_path,
                            self.cgit_datadir)
        subprocess.Popen(['git', 'web--browse', 'http://localhost:8080/cgit/'])
        try:
            print('starting server')
            server.serve_forever()
        except KeyboardInterrupt:
            pass


def main(args):
    InstaCGit(
        git_dir=get_output('git', 'rev-parse', '--git-dir'),
        cgit_path=get_config_path('instacgit.script'),
        cgit_datadir=get_config_path('instacgit.datadir')
    ).run()
    return 0


if __name__ == '__main__':
    sys.exit(main(sys.argv[1:]))
